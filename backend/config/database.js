import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const connectDB = async () => {
  try {
    // Options de connexion recommand√©es
    const options = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    };

    // Connexion √† MongoDB
    const conn = await mongoose.connect(process.env.MONGODB_URI, options);

    console.log(`‚úÖ MongoDB connect√©: ${conn.connection.host}`);
    console.log(`üìä Base de donn√©es: ${conn.connection.name}`);
    
    // Gestion des √©v√©nements de connexion
    mongoose.connection.on('connected', () => {
      console.log('üîó Mongoose connect√© √† MongoDB');
    });

    mongoose.connection.on('error', (err) => {
      console.error('‚ùå Erreur de connexion MongoDB:', err);
    });

    mongoose.connection.on('disconnected', () => {
      console.log('üîå Mongoose d√©connect√© de MongoDB');
    });

    // Fermeture propre de la connexion lors de l'arr√™t de l'application
    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      console.log('üõë Connexion MongoDB ferm√©e suite √† l\'arr√™t de l\'application');
      process.exit(0);
    });

  } catch (error) {
    console.error('‚ùå Erreur de connexion √† MongoDB:', error.message);
    
    // En d√©veloppement, on peut continuer sans MongoDB
    if (process.env.NODE_ENV === 'development') {
      console.log('‚ö†Ô∏è  Mode d√©veloppement: continuation sans MongoDB');
      console.log('üí° V√©rifiez votre MONGODB_URI dans le fichier .env');
    } else {
      // En production, on arr√™te l'application
      process.exit(1);
    }
  }
};

export default connectDB;